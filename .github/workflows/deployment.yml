name: 디스코드 봇 배포

on:
  # 메인브랜치로 pr 날리면 깃헙액션 실행
  pull_request:
    branches:
      - "main"

  # 깃허브 웹을 통해서 깃헙액션 수동실행 설정
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

# 깃헙 액션의 수행작업 플로우
jobs:
  build:
    runs-on: ubuntu-latest # 워크플로우 실행환경 정의

    steps:
      - uses: actions/checkout@v3 # 깃헙 레포의 소스코드를 작업 디렉터리로 가져오기

      - name: JDK 17 세팅
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "temurin"

      - name: application.yml 생성
        run: | # yml 생성하고 시크릿 값 복붙
          cd ./src/main/resources
          touch ./application.yml 
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      - name: 스프링 앱 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: 도커 이미지 생성 & 도커허브 푸쉬
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_REPO }}:latest

      - name: 도커컴포즈 실행
        uses: appleboy/ssh-action@master # ssh를 사용하여 원격 서버 접속 및 명령어 실행
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          # 현재 실행중인 컨테이너 종료하고 고아삭제
          # docker-compose에 명시된 최신 이미지 가져오기
          # 가져온 이미지를 백그라운드로 컨테이너 실행
          # 사용하지 않는 이미지 제거
          script: |
            docker-compose -f docker-compose.yml down --remove-orphans 
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
            docker image prune -f
